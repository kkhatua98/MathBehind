{
  
    
        "post0": {
            "title": "Projection of a Vector on a Subspace",
            "content": "Problem: Suppose $ vec{u}$ is an n dimensional vector and we have to calculate the vector projection of $ vec{u}$ on the vector space, S generated by r independent vectors $ vec{v}_1, vec{v}_2, vec{v}_3, ... , vec{v}_r (r &lt; n)$. . Solution: Let the projection vector is $ vec{v}$. Then clearly $ vec{v}$ will be some linear combination of $ vec{v}_1, vec{v}_2, vec{v}_3, ... , vec{v}_r$, ie. . $$ vec{v} = c_1 vec{v}_1 + c_2 vec{v}_2 + c_3 vec{v}_3 + ... + c_r vec{v}_r = V. vec{c} $$where, $$ V = ( vec{v}_1 hspace{4mm} vec{v}_2 hspace{4mm} vec{v}_3 hspace{4mm} ... hspace{4mm} vec{v}_r), vec{c}= begin{pmatrix} c_1 c_2 c_3 . . . c_r end{pmatrix} $$ . Let, $$ vec{w}= vec{u}- vec{v}$$ . Now, $ vec{w}$ is orthogonal to every $v_i, i = 1,...,r$, ie. $$ begin{aligned} &amp; vec{v}_i^T. vec{w} hspace{5mm} = hspace{5mm} 0 &amp; vec{v}_i^T. ( vec{u}- vec{v}) hspace{5mm} = hspace{5mm}0 &amp; vec{v}_i^T. vec{u} hspace{5mm} = hspace{5mm} vec{v}_i^T.v &amp; vec{v}_i^T. vec{u} hspace{5mm} = hspace{5mm} vec{v}_i^T.V. vec{c} end{aligned} $$ . So, we get r equations in r unknowns. Now, if we write all the equations explicitly in matrix form we will get, . $$ begin{aligned} &amp; begin{pmatrix} vec{v}_1^T.V. vec{c} vec{v}_2^T.V. vec{c} vec{v}_3^T.V. vec{c} . . . vec{v}_r^T.V. vec{c} end{pmatrix} hspace{5mm} = hspace{5mm} begin{pmatrix} vec{v}_1^T. vec{u} vec{v}_2^T. vec{u} vec{v}_3^T. vec{u} . . . vec{v}_r^T. vec{u} end{pmatrix} &amp; begin{pmatrix} vec{v}_1^T vec{v}_2^T vec{v}_3^T . . . vec{v}_r^T end{pmatrix}.V. vec{c} hspace{5mm} = hspace{5mm} begin{pmatrix} vec{v}_1^T vec{v}_2^T vec{v}_3^T . . . vec{v}_r^T end{pmatrix} vec{u} &amp;V^T.V. vec{c}=V^T vec{u} &amp; vec{c} = (V^TV)^{-1}V^T vec{u} end{aligned} $$Now, $$ begin{aligned} vec{v} &amp;= hspace{3mm} V. vec{c} &amp;= hspace{3mm} V(V^TV)^{-1}V^T vec{u} end{aligned} $$ . . Some Special Cases . 1) r = 1 Here, $V= vec{v}_1$. So, $V^TV hspace{2mm} = hspace{2mm} || vec{v}_1||^2$ and $(V^TV)^{-1}= frac{1}{|| vec{v}_1||^2}$ . So, $v= frac{ vec{v}_1^T vec{u}}{|| vec{v}_1||^2}. vec{v}_1$ . 2) $ vec{v}_i$ s are orthogonal. Here, $$V^TV hspace{5mm} = hspace{5mm} diag(|| vec{v}_i||^2)$$ So, $$(V^TV)^{-1} hspace{5mm} = hspace{5mm} diag( frac{1}{|| vec{v}_i||^2})$$ Now, $$ begin{aligned} v &amp;= hspace{5mm} V(V^TV)^{-1}V^Tu &amp;= V. begin{pmatrix} frac{1}{|| vec{v}_1||^2} &amp; 0 &amp; ... &amp; 0 0 &amp; frac{1}{|| vec{v}_2||^2} &amp; ... &amp; 0 . &amp; . &amp; ... &amp; . . &amp; . &amp; ... &amp; . . &amp; . &amp; ... &amp; . 0 &amp; 0 &amp; ... &amp; frac{1}{|| vec{v}_r||^2} end{pmatrix} begin{pmatrix} vec{v}_1^T vec{u} vec{v}_2^T vec{u} . . . vec{v}_r^T vec{u} end{pmatrix} &amp; = begin{pmatrix} vec{v}_1 &amp; vec{v}_2 &amp; ... &amp; vec{v}_r end{pmatrix} begin{pmatrix} frac{ vec{v}_1^Tu}{|| vec{v}_1||^2} frac{ vec{v}_2^Tu}{|| vec{v}_2||^2} . . . frac{ vec{v}_r^Tu}{|| vec{v}_r||^2} end{pmatrix} end{aligned} $$ So, $$v = frac{ vec{v}_1^Tu}{|| vec{v}_1||^2} vec{v}_1 + frac{ vec{v}_2^Tu}{|| vec{v}_2||^2} vec{v}_2+...+ frac{ vec{v}_r^Tu}{|| vec{v}_r||^2} vec{v}_r$$ .",
            "url": "https://kkhatua98.github.io/MathBehind/linear-algebra/projection/gram-schmidt-orthogonalisation/2021/10/17/Projection.html",
            "relUrl": "/linear-algebra/projection/gram-schmidt-orthogonalisation/2021/10/17/Projection.html",
            "date": " • Oct 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Principal Component Anlysis",
            "content": "Introduction . Suppose our $n$ feature vectors $ underset{ sim}{x_1}, underset{ sim}{x}_2, underset{ sim}{x}_3, ..., underset{ sim}{x}_n$ are 2 dimensional. As, we always prefer to create model with fewer number of variables whenever possible, we want to drop one among the two regressors. Now consider, two cases, . Case 1 . We see that, variance in x_2 is much less than x_1; ie. x_2 remain more or less same even if the dependent variable $y$ changes. In simple terms $y$ does not dependent on x_2 as it depends on x_1. Here we can even say that, it does not depend at all (with little risk). So, we can safely drop it. . Case 2 . Now suppose now scatter plot x_1 vs x_2 looks like this, Here we cannot say that variance of one variable is much less than the other, there is enough variance in both of the axis. But suppose we are desparate to drop one of the variable. If we consider the red arrow direction in the picture, we see that in this direction variation is much less than the blue arrow direction. This observation is the key to the Principal Component Analysis. If we rotate our axis so that our x_1 axis meets blue arrow and the x_2 axis meets the red arrow, then in the resulting rotated axis we can drop the rotated x_2 axis. Also we can rotate so that we drop the x_1 axis. But we take the approach to drop the later variable (x_2). If we generalise the above concept for multivariate set up, we get, . Rotate the original axes so that variance of the first rotated axis &gt; variance of the next rotated axis &gt; ... and so on. . Doing the Mathematics . Suppose $ vec{x}$ is our p dimensional feature vector. We want to rotate our original axes, ie. we want a orthogonal matrix $Q$ (ie. $Q^TQ = I$) such that, $$Q. vec{x} = begin{pmatrix} vec{Q_1} vec{Q_2} vec{Q_3} . . . vec{Q_p} end{pmatrix}. vec{x} = begin{pmatrix} vec{Q_1}. vec{x} vec{Q_2}. vec{x} vec{Q_3}. vec{x} . . . vec{Q_p}. vec{x} end{pmatrix} = begin{pmatrix} P_1 P_2 P_3 . . . P_n end{pmatrix} = vec{P}$$ $$ text{Here $Q_i$s are row vectors and $P_i$s are scalar}$$ . Now we have to determine a $Q$ so that in $P$, $var(P_1) &gt; var(P_2) &gt; var(P_3) &gt; ... &gt; var(P_p)$ . Note: Here sum of variances of $P_i$s and sum of variances of the original $x_i$ are same. As, $$ sum_{i=1}^{p} var(P_i) = Trace(var(Q. vec{x})) = Trace(Q Sigma Q^T) = Trace(Q^TQ Sigma) = Trace( Sigma) = sum_{i=1}^p var(x_i)$$ $ Sigma$ is the variance covariance matrix of $ vec{x}$. . Getting the First Axis: . $$ begin{aligned} var(P_1) &amp;= var( vec{Q_1}. vec{x}) &amp;= Q_1.var( vec{x}).Q_1^T &amp; left. begin{aligned} &amp;= Q_1. Sigma Q_1^T &amp;= Q_1ED_{ lambda}E^TQ_1^T end{aligned} right } text{by Eigendecomposition of $ Sigma$. (1)} &amp;= AD_{ lambda}A^T (2) &amp;= sum_{i=1}^p lambda_iA_i^2 &amp; le lambda_{hi} sum_{i=1}^{p}A_i^2 &amp;= lambda_{hi}.1 &amp;= lambda_{hi} end{aligned} $$Here, $A = Q_1.E$ (note, this is a column vector) $D_{ lambda} =$ Diagonal matrix of eigen values $= diag( lambda_1, lambda_2, lambda_3, ... , lambda_p)$ $E =$ Orthogonal matrix of eigen vectors $= (E_1, E_2, E_3, ..., E_p)$, where $E_i$ is the eigen vector corresponding to $ lambda_i$ and, $ sum_{i=1}^pA_i^2 = A^T.A = underbrace{Q_1.E.E^TQ_1^T = Q_1.I.Q_1^T}_{ text{$E$ is orthogonal matrix}} = Q_1.Q_1^T = 1$, $hi$, is the index for which $ lambda$ is maximum. . Now, suppose $E_{hi}$ is the eigen vector corresponding to $ lambda_{hi}$. . Then, $$ begin{aligned} var(E_{hi}^T. vec{x}) &amp;= E_{hi}^T Sigma E_{hi} &amp;= E_{hi}^TED_{ lambda}E^TE_{hi} &amp;= E_{hi}^T(E_1 E_2 ... E_{hi} ... E_p)D_{ lambda} begin{pmatrix}E_1^T E_2^T . . E_{hi}^T . . . E_p^T end{pmatrix}E_{hri} &amp;= vec{e}_{hi}^TD_{ lambda} vec{e}_{hi} = lambda_{hi} end{aligned} $$ . Here, only jth entry of $e_j$ is 1, rest are 0. . So, the first Principal Component $Q_1=E_{hi}^T$ . Getting the Second Axis . $Q$ is orthogonal matrix, so, $Q_2.Q_1^T=0; Q_2.E_{hi}=0$. . Now, $$ begin{aligned} var(P_2) &amp;= var( vec{Q_2}. vec{x}) &amp;= vec{Q}_2. Sigma. vec{Q}_2^T &amp;= vec{Q}_2ED_{ lambda}E^T. vec{Q}_2^T &amp;= vec{Q}_2(E_1 E_2 .. E_{hi} .. E_p)D_{ lambda} begin{pmatrix}E_1^T E_2^T . . E_{hi}^T . . E_p^T end{pmatrix}Q_2^T &amp;= ( vec{Q}_2.E_1 vec{Q}_2.E_2 .. vec{Q}_2E_{hi} ... vec{Q}_2E_p)D_{ lambda} begin{pmatrix} vec{Q}_2^T.E_1^T vec{Q}_2^T.E_2^T . . vec{Q}_2^T.E_{hi}^T . . . vec{Q}_2^T.E_p^T end{pmatrix} end{aligned} $$ $$ &amp;=( vec{Q}_2.E_1 vec{Q}_2.E_2 ... 0 ... vec{Q}_2E_p)D_{ lambda} begin{pmatrix} vec{Q}_2^T.E_1^T vec{Q}_2^T.E_2^T . . 0 . . . vec{Q}_2^T.E_p^T end{pmatrix} &amp;=A_*D_{ lambda}A_*^T &amp;= sum_{i=1 i neq hi}^p lambda_iA_{*i}^2 &amp; le lambda_{hi_2} sum_{i=1 i neq hi}^p A_{*i}^2 &amp;= lambda_{hi_2}.1 &amp;= lambda_{hi_2} end{aligned} $$ where, $ lambda_{hi_2}$ is the second highest eigen value and $hi_2$ is the index of it $ sum_{i=1 i neq hi}^p A_{*i}^2 = A_*^T.A_* = underbrace{Q_2.E.E^TQ_2^T = Q_2.I.Q_2^T}_{ text{$E$ is orthogonal matrix}} = Q_2.Q_2^T = 1$ . Now, suppose $E_{hi_2}$ is the eigen vector corresponding to $ lambda_{hi}$. . Then,$$ begin{aligned} var(E_{hi_2}^T. vec{x}) &amp;= E_{hi_2}^T Sigma E_{hi_2} &amp;= E_{hi_2}^TED_{ lambda}E^TE_{hi_2} &amp;= E_{hi_2}^T(E_1 E_2 E_3 ... E_{hi_2} ... E_p)D_{ lambda} begin{pmatrix}E_1^T E_2^T E_3^T . . E_{hi_2}^T . . . E_p^T end{pmatrix}E_{hi_2} &amp;= vec{e}_{hi_2}^TD_{ lambda} vec{e}_{hi_2} &amp;= lambda_{hi_2} end{aligned} $$ . Here, only jth entry of $e_j$ is 1, rest are 0. . So, the first Principal Component $Q_2=E_{hi_2}^T$ . Note: . $$ begin{aligned} cov(P_1, P_2) &amp;= cov( vec{Q}_1. vec{x}, vec{Q_2}. vec{x}) &amp;= cov( vec{E}_{hi}^T. vec{x}, vec{E}_{hi_2}^T. vec{x}) &amp;= vec{E}_{hi}^T. Sigma vec{E}_{hi_2} &amp;= E_{hi}^T( vec{E}_1 vec{E}_2 vec{E}_3 ... vec{E}_{hi} ... vec{E}_p)D_{ lambda} begin{pmatrix} vec{E}_1^T vec{E}_2^T vec{E}_3^T . . vec{E}_{hi_2}^T . . . vec{E}_p^T end{pmatrix}. vec{E}_{hi_2} &amp;= (0 0 0 ... 1 ... 0)D_{ lambda} begin{pmatrix}0 0 0 . . 1 . . . 0 end{pmatrix} &amp;= underbrace{(0 0 0 ... 1 ... 0)}_{ text{1 in $hi$ position}} underbrace{ begin{pmatrix}0 0 0 . . lambda_{hi_2} . . . 0 end{pmatrix}}_{ text{$ lambda_{hi_2}$ in $hi_2$ position}} &amp;=0 end{aligned} $$, ie covariance is 0, so correlation is also 0. . So, one advantage of this rotation is that the resulting axes become uncorrelated (not independent). Here we should not get confuse with the concept of orthogonality and uncorrelatedness. Orthogonality is a geometrical concept, where uncorrelatedness is statistical concept. Also, we can rotate the axes in a direction, such that the resulting axes are correlated. . Like this we can calculate the remaining Principal Components. . How to Calculate Principal Components for Data . Of course when we have data, we do not know the $ Sigma$ matrix, so we can not calculate the original Principal Components. One obvious choice is that we estimate $ Sigma$ with sample covariance matrix $$ hat{ Sigma} = S = frac{1}{n - 1} sum_{i=1}^n ( vec{x}_i - bar{x}).( vec{x}_i - bar{x})^T$$ and calculate the eigenvalue, eigenvectors of $S$. . Calculating Principal Components manually and with Scikit-Learn on a dataset. . Loading data . import pandas # Loading data data = pandas.read_csv(&quot;https://raw.githubusercontent.com/kkhatua98/All/main/Transformed_Data.csv&quot;) data.head() . x_1 x_2 . 0 -3.995782 | -5.632142 | . 1 -3.496130 | -5.124706 | . 2 3.630809 | 8.009889 | . 3 3.755696 | 6.889920 | . 4 -1.945930 | -3.323225 | . Visualising Data . import matplotlib.pyplot as plt import seaborn plot = seaborn.scatterplot(data[&quot;x_1&quot;], data[&quot;x_2&quot;]) plot.set_title(&quot;x_1 VS x_2&quot;, y = 1.02) plot.set_xlabel(&quot;x_1&quot;) plot.set_ylabel(&quot;x_2&quot;) plt.xlabel(&quot;x_1&quot;) plt.ylabel(&quot;x_2&quot;) . /usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . Text(0, 0.5, &#39;x_2&#39;) . Calculating Q manually . import numpy covariance_matrix = data.cov() # Calculating the eigenvalues and eigenvectors eigenvalues, eigenvectors = numpy.linalg.eig(covariance_matrix) # In eigenvalues values are not sorted, but we need in sorted order. idx = eigenvalues.argsort()[::-1] eigenvalues = eigenvalues[idx] eigenvectors = eigenvectors[:,idx] # In eigenvectors eigenvectors are stored columnwise. But in Q eigenvectors are stored rowsise. # So we have to transpose it. Q_manual = eigenvectors.T print(Q_manual) . [[-0.49748739 -0.86747121] [-0.86747121 0.49748739]] . Calculating Q from Sklearn . from sklearn.decomposition import PCA pca = PCA() pca.fit(data) print(pca.components_) . [[ 0.49748739 0.86747121] [ 0.86747121 -0.49748739]] . This two results may seem different at first, but note that, every row of pca.components_ is an eigenvector so, changing its sign does not change anything. So, we see that, the rotation matrix calculated manually and from Sklearn are same. .",
            "url": "https://kkhatua98.github.io/MathBehind/dimension%20reduction/pca/2021/10/17/PCA.html",
            "relUrl": "/dimension%20reduction/pca/2021/10/17/PCA.html",
            "date": " • Oct 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kkhatua98.github.io/MathBehind/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kkhatua98.github.io/MathBehind/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kkhatua98.github.io/MathBehind/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}